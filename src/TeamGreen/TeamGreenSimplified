/*
Line Following Base Code with Four Sensors
Digital Inputs should be 4-7, Right to Left
From the POV of the Bot
*/


#define IRR 4               // pin for the right most QTI  (facing the front of the bot)        
#define IRRC 5              // pin for the center right QTI   
#define IRLC 6              // pin for the center left QTI
#define IRL 7               // pin for the left most QTI 

#define LED 3               // pin for the LED Indicator 

#include <Servo.h>           
#include <SoftwareSerial.h> 
#define onesens 8           // pin for the sensing QTI on the side
 
#define Rx 11 // DOUT to pin 11  // pin for Xbee output
#define Tx 10 // DIN to pin 10   // pin for Xbee input
SoftwareSerial Xbee (Rx, Tx);


Servo leftServo;                //define servos 
Servo rightServo;               
int calibDiff = 50;            // cutoff RC time value for detecting black line on the board
int calibsen = 400;            // cutoff RC time value for detecting the peg on the side
int counter = 0;               // stores the distance between the pegs
int contact = 2;               // number of pegs needed to be detected
int accu = 15;                 // RC time value needed to be greater than cutoff value 15 times consectively to ensure a peg is detected
int c0 = 0;                    // base value distance
int c1 = 100;                  // distance value ceiling for reporting a '1'
int c2 = 200;                  // distance value ceiling for reporting a '2'
int c3 = 300;                  // distance value ceiling for reporting a '3'
int c4 = 430;                  // distance value ceiling for reporting a '4'
int c5 = 1000;                 // distance value ceiling for reporting a '5' 
int report = 0;                // the result 
int black = 0;                 // used as a boolean, to indicator whether a black tick mark is reached or not
int tick = 0;                  // number of tick mark passed
int des = 0;                   // the parking tick mark 

void setup() 
{
  Serial.begin(9600);
  leftServo.attach(13);        //attach servos
  rightServo.attach(12);
  Move(0,0);                   //Not moving
  pinMode(LED,OUTPUT);         //set the LED pin to output 
  
                               // XBee setup: 
 Xbee.begin(9600);
 delay(3000);
}


void Move(int left, int right) {              //function that controls the servos 
  delay(0);                                   // input: '1' moves, '0' stops
 if (left == 1) {        
 leftServo.writeMicroseconds(1600);           // rotate the left servo ccw at half of its max speed
 } else if (left == 0) {
   leftServo.writeMicroseconds(1500);         // stop moving 
 }
 if (right == 1) {                            // rotate the left servo cw at half of its max speed
 rightServo.writeMicroseconds(1425); 
 } else if (right == 0) {                     // stop moving
   rightServo.writeMicroseconds(1500);
}
}  
long RCtime(int sensPin){
   long result = 0;
   pinMode(sensPin, OUTPUT);       // make pin OUTPUT
   digitalWrite(sensPin, HIGH);    // make pin HIGH to discharge capacitor - study the schematic
   delay(1);                       // wait a  ms to make sure cap is discharged
   pinMode(3,OUTPUT);

   pinMode(sensPin, INPUT);        // turn pin into an input and time till pin goes low
   digitalWrite(sensPin, LOW);     // turn pullups off - or it won't work
   while(digitalRead(sensPin)){    // wait for pin to go low
      result++;
   }


   return result;                   // report results   
} 


int PegValue(int counting){                     //returns the number of empty spaces between the pegs
  int Peg = 0;                                  // input: distance between the pegs
  if (counting >=c0 && counting <=c1){          
  Peg = 1;
  }
  
  if (counting >c1 && counting <=c2){
  Peg = 2;
  }
  
  if (counting >c2 && counting <=c3){
  Peg = 3;
  }
  
  if (counting >c3 && counting <=c4){
  Peg = 4;
  }
  
  if (counting >c4 && counting <=c5){
  Peg = 5;
  }
  
  return Peg;
}
void onBlack(){                            // if the bot hits a tick mark 
  des = 6-report;                          // counting the location to park using the number from the task
  if(black==0 && tick!=des){               // running into a tick mark
    Move(0,0);                             // stops for a splint of a sec (kinda unnecessary, forgot to take it off)
    tick++;                                // count the total number of tick mark passed
    if (tick ==1)  {                       // if the first big black line is hit (first tick mark for the green team) 
      Move(0,0);                           // stop moving and detach servos
      leftServo.detach(); //attach servos
      rightServo.detach();
      for (int k =0;k<report;k++) {        // indicate the number sensed from the task by blinking LED
        digitalWrite(LED, HIGH);           // Pin 13 = 5 V, LED emits light
        delay(300);                        // ..for 0.5 seconds
        digitalWrite(LED, LOW);            // Pin 13 = 0 V, LED no light
        delay(300);  
      }
      //report = doIGo();
      waitForSignal(report);                // listen for the "move" signal from previous robot  
      leftServo.attach(13);                 //attach servos
      rightServo.attach(12);
      delay(200);
    }
    black = 1;                             //change the boolean state  
    
  } else if (black == 1){                  //allow the bot move pass the tick mark
    Move(1,1);
  } else if(tick == des){                  //park if the parking tick mark is reached
  Move(0,0);
  imGoing(report);                         //tell the next robot to move
  leftServo.detach();                      //detach servos 
  rightServo.detach();
  while(1) {                               //infinit delay 
    delay(1000);
  }
  }
}
void loop() {                              //booleans for detections of the black line
  int irl = RCtime(IRL) > calibDiff;       
  int irlc = RCtime(IRLC) > calibDiff;
  int irrc = RCtime(IRRC) > calibDiff;
  int irr = RCtime(IRR) > calibDiff;
  
  if (irl && irlc && irrc && irr) {        // All Black: call the function to see what to do
    onBlack();
  } 
  else if (irlc && irrc) {                
                                           // Insides Black: keep moving straight
    Move(1,1);
  } else if (!irr && !irrc) {
                                           // Two Right Sides white: turn left
    Move(0,1);
  } else if (!irl && !irlc) {
                                           // Two Left Sides white: turn right
    Move(1,0);
  }
  if (!irr && !irl){                       // outside white: change the state of the boolean that indicates
    black = 0;                             // if the bot stops on the black tick
  }
  
  
  int d1 = RCtime(onesens) > calibsen;    // boolean for detections of empty space
  
  if (!d1 && contact==2){                // if a peg is there and there are two pegs neeed to be detected             
    accu--;                              // making sure its a peg by repeating this process 15 times 
    if (accu==0){                        // it's a peg, one peg left to go
      contact--;
      accu=15;                           // reset the accuracy value for next detection
    } 
  }
  if (d1 && contact==1 && counter>=0){  // count the number of times empty space is detected. store the value as the distance
    counter++; 

  }
  if (!d1 && contact==1 && counter>15){ // the last peg detected
    accu--;
    if (accu==0){
      contact--;
      report = PegValue(counter);      // the result of detection
    }      
  }
}


//This function will wait until your bot recieves a message to go. (The bot in front of you in line should 
//send this mesage.) There is a timeout that corresponds to your bot number. There is a grand timeout of 45s.
//If you send -1, your bot will go at 45 seconds.
void waitForSignal(int pos) {           //input: the result of detection
   long now = millis();                 // begining system time 
   while(1) {
                                        //if i'm bot 1, I go
     if (pos == 1) {                    //time to go!
       return; 
     }
     
                                        //the characters used to represent the order/result of detection
     char keymap[] =  "yuiop";
     char theirKey = keymap[pos-1];     // since array starts at [0] and our number starts at [1]
    
                                        //read xbee until the person in front of you says going
     while (Xbee.available()) {
                                        //Read Character
      char receiving = Xbee.read();
                                        //if char is the id of the bot in front of me, I should go
      if (receiving == theirKey) {
                                        //my turn
       return; 
      }
    }
    
                                       //unknown value? send -1 and wait for 45. TODO: deduce position
    if (pos == -1) {
       delay(45000L); //30 seconds before going
    }
    
                                       //time out
    if (millis() > (30000L + ((long)pos)*10000L)) {
        return;
    }
    
                                      //grand timeout
    if (millis() > 90000L) {
       return; 
    }
  }
}

void imGoing(int pos) {             // send the character to tell the next bot to move
   char keymap[] =  "yuiop";
   for (int i = 0; i < 10; i++) {
     Xbee.print(keymap[pos]);
     delay(10);
   }
}
